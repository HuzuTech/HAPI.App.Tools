// Generated by CoffeeScript 1.6.2
(function() {
  var Tools, child_process, fs, os;

  fs = require("fs");

  os = require("os");

  child_process = require("child_process");

  Tools = (function() {
    function Tools() {}

    Tools.prototype.localBin = "./node_modules/.bin";

    Tools.prototype.print = function(msg, header) {
      if (header == null) {
        header = false;
      }
      if (header) {
        console.log("####################################################");
      }
      return console.log(msg);
    };

    Tools.prototype.cmd = function(cmd, args, callback, local) {
      var isWindows;

      if (local == null) {
        local = false;
      }
      isWindows = os.platform().match(/^win/);
      if (local) {
        cmd = "" + this.localBin + "/" + cmd;
      }
      if (isWindows) {
        args.unshift(cmd);
        if (local) {
          args.unshift("node");
        }
        cmd = args.join(" ");
        return this.exec(cmd, callback);
      } else {
        return this.spawn(cmd, args, callback);
      }
    };

    Tools.prototype.localCmd = function(cmd, args, callback) {
      return this.cmd(cmd, args, callback, true);
    };

    Tools.prototype.spawn = function(cmd, args, callback) {
      var p;

      this.print("" + cmd + " " + (args != null ? args.join(' ') : void 0));
      p = child_process.spawn(cmd, args);
      p.stdout.setEncoding("utf8");
      p.stdout.on("data", function(data) {
        return process.stdout.write(data);
      });
      p.stderr.setEncoding('utf8');
      p.stderr.on("data", function(data) {
        return process.stderr.write(data);
      });
      return p.on("exit", function(code) {
        return typeof callback === "function" ? callback(code) : void 0;
      });
    };

    Tools.prototype.exec = function(cmd, callback) {
      var _this = this;

      return child_process.exec(cmd, function(err, stdout, stderr) {
        _this.print("" + cmd);
        _this.print(stdout, false);
        if (err) {
          _this.print("'" + cmd + "': ERROR: " + err, false);
        }
        return typeof callback === "function" ? callback(stdout.slice(0, -1)) : void 0;
      });
    };

    Tools.prototype.currentTag = function(callback) {
      return this.exec("git describe --abbrev=0", callback);
    };

    Tools.prototype.mergesSinceTag = function(tag, callback) {
      return this.exec("git rev-list " + tag + "..HEAD --count --merges", callback);
    };

    Tools.prototype.version = function(callback) {
      var _this = this;

      return this.currentTag(function(tag) {
        return _this.mergesSinceTag(tag, function(merges) {
          return callback("" + tag + "." + merges);
        });
      });
    };

    Tools.prototype.writePackageVersion = function(version, callback) {
      var pkg;

      pkg = "package.json";
      return fs.readFile(pkg, function(err, str) {
        var json;

        json = JSON.parse(str);
        json.version = version;
        return fs.writeFile(pkg, JSON.stringify(json, null, 4), callback);
      });
    };

    Tools.prototype.commitVersion = function(version, callback) {
      var _this = this;

      return this.cmd("git", ["add", "package.json"], function() {
        return _this.cmd("git", ["commit", "-m", "Version " + version], callback);
      });
    };

    Tools.prototype.push = function(branch, callback) {
      return this.cmd("git", ["push", "origin", branch], callback);
    };

    Tools.prototype.publish = function(callback) {
      return this.cmd("npm", ["publish"], callback);
    };

    return Tools;

  })();

  module.exports = new Tools;

}).call(this);
